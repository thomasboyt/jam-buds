name: Run Tests

on: [push]

jobs:
  api-tests:
    name: "Node API Tests"
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:11.2-alpine
        env:
          POSTGRES_DB: jambuds_test
        ports:
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis:5.0.3-alpine
        ports:
          - 6379/tcp
        options: --entrypoint redis-server

    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      # - name: Restore/cache API node modules
      #   uses: actions/cache@v1
      #   env:
      #     cache-name: cache-api-node-modules
      #   with:
      #     path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('api/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-

      - run: npm ci
        working-directory: ./api

      - run: npm test
        working-directory: ./api
        env:
          DATABASE_URL: "postgres://postgres@localhost:${{ job.services.postgres.ports[5432] }}/jambuds_test"
          REDIS_URL: "redis://localhost:${{ job.services.redis.ports[6379] }}"

  rhiannon-tests:
    name: "Rhiannon Tests"
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:11.2-alpine
        env:
          POSTGRES_DB: jambuds_test
        ports:
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis:5.0.3-alpine
        ports:
          - 6379/tcp
        options: --entrypoint redis-server

    steps:
      - uses: actions/checkout@v1
  
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
  
      # - name: Restore/cache Gradle dependencies
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.gradle/caches
      #     key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gradle-

      - name: Build
        run: ./gradlew assemble
        working-directory: ./rhiannon

      - name: Test
        run: ./gradlew test
        working-directory: ./rhiannon
        env:
          REDIS_URL: "redis://localhost:${{ job.services.redis.ports[6379] }}"
          JDBC_DATABASE_URL: "jdbc:postgresql://localhost:${{ job.services.postgres.ports[5432] }}/jambuds_test?user=postgres&password=postgres"
  
  integration-tests:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    needs: rhiannon-tests

    services:
      postgres:
        image: postgres:11.2-alpine
        env:
          POSTGRES_DB: jambuds_test
        ports:
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis:5.0.3-alpine
        ports:
          - 6379/tcp
        options: --entrypoint redis-server

    env:
      NODE_ENV: test
      TEST_ENV: feature
      CI: "1"
      SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
      SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}

    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Install psql@11
        run: |
          sudo apt-get install curl ca-certificates gnupg
          curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt-get update
          sudo apt install postgresql-client-11

      # - name: Restore/cache Gradle dependencies
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.gradle/caches
      #     key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gradle-

      # - name: Restore/cache API node modules
      #   uses: actions/cache@v1
      #   env:
      #     cache-name: cache-api-node-modules
      #   with:
      #     path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('api/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-

      # - name: Restore/cache App node modules
      #   uses: actions/cache@v1
      #   env:
      #     cache-name: cache-app-node-modules
      #   with:
      #     path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('app/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-

      # - name: Restore/cache integration test node modules
      #   uses: actions/cache@v1
      #   env:
      #     cache-name: cache-spec-node-modules
      #   with:
      #     path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('spec/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-

      - run: npm ci
        working-directory: ./api
        name: Install API dependencies

      - run: npm ci
        working-directory: ./app
        name: Install app dependencies

      - run: npm ci
        working-directory: ./spec
        name: Install integration test dependencies

      - run: npm install -g wait-on

      - run: npm run build
        working-directory: ./app
        name: Build app

      - run: npm start & wait-on -t 20000 http://localhost:8081
        working-directory: ./app
        name: Start App server
      
      - run: npm run e2e & wait-on -t 20000 tcp:3001
        working-directory: ./api
        name: Start API server
        env:
          DATABASE_URL: "postgres://postgres@localhost:${{ job.services.postgres.ports[5432] }}/jambuds_test"
          REDIS_URL: "redis://localhost:${{ job.services.redis.ports[6379] }}"

      - run: ./gradlew assemble
        working-directory: ./rhiannon
        name: Build Rhiannon server

      - run: ./gradlew run & wait-on -t 20000 tcp:7000
        working-directory: ./rhiannon
        name: Start Rhiannon server
        env:
          JDBC_DATABASE_URL: "jdbc:postgresql://localhost:${{ job.services.postgres.ports[5432] }}/jambuds_test?user=postgres&password=postgres"
          REDIS_URL: "redis://localhost:${{ job.services.redis.ports[6379] }}"
          JAMBUDS_ENV: "feature"

      - run: npm test
        working-directory: ./spec
        name: Run Cypress
        env:
          JDBC_DATABASE_URL: "jdbc:postgresql://localhost:${{ job.services.postgres.ports[5432] }}/jambuds_test?user=postgres&password=postgres"
          DATABASE_URL: "postgres://postgres@localhost:${{ job.services.postgres.ports[5432] }}/jambuds_test"
          REDIS_URL: "redis://localhost:${{ job.services.redis.ports[6379] }}"