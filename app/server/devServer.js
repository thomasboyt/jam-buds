const path = require('path');
const webpack = require('webpack');
const createDevMiddleware = require('webpack-dev-middleware');
const MFS = require('memory-fs');
const express = require('express');

const clientConfig = require('../webpack/client');
const serverConfig = require('../webpack/server');

const readFile = (fs, file) => {
  try {
    return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8');
  } catch (e) {
    /* XXX: Silently fail */
  }
};

module.exports = function setupDevServer(
  app,
  { onStart, onComplete, onError }
) {
  app.use('/', express.static('static/'));

  let bundle;
  let clientManifest;

  // Promise that resolves when client bundle and client manifest become initially available
  let readyPromiseResolve;
  const readyPromise = new Promise((r) => {
    readyPromiseResolve = r;
  });

  const update = () => {
    if (bundle && clientManifest) {
      readyPromiseResolve();
      onComplete(bundle, clientManifest);
    }
  };

  // dev middleware
  const clientCompiler = webpack(clientConfig);
  const devMiddleware = createDevMiddleware(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
  });

  app.use(devMiddleware);

  clientCompiler.plugin('done', (webpackStats) => {
    const stats = webpackStats.toJson();

    if (stats.errors.length) {
      return;
    }

    clientManifest = JSON.parse(
      readFile(devMiddleware.fileSystem, 'vue-ssr-client-manifest.json')
    );

    update();
  });

  // watch and update server renderer
  const serverCompiler = webpack(serverConfig);
  const mfs = new MFS();
  serverCompiler.outputFileSystem = mfs;

  serverCompiler.plugin('watch-run', (compiler, cb) => {
    onStart(readyPromise);
    cb();
  });

  serverCompiler.watch({}, (err, webpackStats) => {
    if (err) {
      throw err;
    }

    if (webpackStats.hasErrors()) {
      onError(webpackStats.toJson().errors);
      return;
    }

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'));
    update();
  });
};
