import * as fs from 'fs';
import * as path from 'path';
import * as webpack from 'webpack';
import * as createDevMiddleware from 'webpack-dev-middleware';
import {Express} from 'express';
const MFS = require('memory-fs');  // the type def for this is bad or somethin, idk

import * as clientConfig from '../../../webpack/client';
import * as serverConfig from '../../../webpack/server';

const readFile = (fs: any, file: any) => {
  try {
    return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
  } catch (e) {}
}

export default function setupDevServer(app: Express, cb: (bundle: any, clientManifest: any) => void) {
  let bundle: any
  let clientManifest: any

  let readyPromiseResolve: (value?: {} | PromiseLike<{}>) => void;
  const readyPromise = new Promise(r => { readyPromiseResolve = r })

  const update = () => {
    if (bundle && clientManifest) {
      readyPromiseResolve()
      cb(bundle, clientManifest);
    }
  }

  // // read template from disk and watch
  // template = fs.readFileSync(templatePath, 'utf-8')
  // chokidar.watch(templatePath).on('change', () => {
  //   template = fs.readFileSync(templatePath, 'utf-8')
  //   console.log('index.html template updated.')
  //   update()
  // })

  // modify client config to work with hot middleware
  // clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app]
  // clientConfig.output.filename = '[name].js'
  // clientConfig.plugins.push(
  //   new webpack.HotModuleReplacementPlugin(),
  //   new webpack.NoEmitOnErrorsPlugin()
  // )

  // dev middleware
  const clientCompiler = webpack(clientConfig)
  const devMiddleware = createDevMiddleware(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
  })

  app.use(devMiddleware)

  clientCompiler.plugin('done', (webpackStats: webpack.Stats) => {
    const stats = webpackStats.toJson()
    stats.errors.forEach((err: any) => console.error(err))
    stats.warnings.forEach((err : any) => console.warn(err))

    if (stats.errors.length) {
      return
    }

    clientManifest = JSON.parse(readFile(
      devMiddleware.fileSystem,
      'vue-ssr-client-manifest.json'
    ))

    update()
  })

  // watch and update server renderer
  const serverCompiler = webpack(serverConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs

  serverCompiler.watch({}, (err, webpackStats: webpack.Stats) => {
    if (err) {
      throw err
    }

    const stats = webpackStats.toJson()
    if (stats.errors.length) {
      return
    }

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
    update()
  })

  return readyPromise
}