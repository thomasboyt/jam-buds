import {Express, Request, Response} from 'express';
import {createBundleRenderer, BundleRenderer} from 'vue-server-renderer';
import setupDevServer from './devServer';
import wrapAsyncRoute from '../util/wrapAsyncRoute';

const isProd = process.env.NODE_ENV === 'production';

const template = `
  <html>
    <head>
      <title>app</title>
    </head>
    <body>
      <div id="app">
        <!--vue-ssr-outlet-->
      </div>
    </body>
  </html>
`;

function createRenderer(bundle: any, clientManifest: any) {
  return createBundleRenderer(bundle,  {
    // recommended for performance
    runInNewContext: false,
    clientManifest,
    template,
  });
}

let renderer: BundleRenderer;
let readyPromise: Promise<{}>;

function setupRenderer(app: Express) {
  if (isProd) {
    // In production: create server renderer using template and built server bundle.
    // The server bundle is generated by vue-ssr-webpack-plugin.
    const serverBundle = require('../../../build/vue-ssr-server-bundle.json');

    // The client manifests are optional, but it allows the renderer
    // to automatically infer preload/prefetch links and directly add <script>
    // tags for any async chunks used during render, avoiding waterfall requests.
    const clientManifest = require('../../../build/vue-ssr-client-manifest.json');

    renderer = createRenderer(serverBundle, clientManifest);

  } else {
    // In development: setup the dev server with watch and hot-reload,
    // and create a new renderer on bundle / index template update.
    readyPromise = setupDevServer(app, (bundle, clientManifest) => {
      renderer = createRenderer(bundle, clientManifest)
    });
  }
}

async function render(req: Request, res: Response) {
  const html = await renderer.renderToString({url: req.url});
  res.send(html);
}

export default function registerRenderer(app: Express) {
  setupRenderer(app);

  app.get('/', wrapAsyncRoute(async (req, res) => {
    if (isProd) {
      return render(req, res);
    } else {
      await readyPromise;
      render(req, res);
    }
  }));
}